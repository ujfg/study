(()=>{var t={584:t=>{t.exports=function(t,e){return Array.prototype.slice.call(t,e)}},514:(t,e,n)=>{"use strict";var r=n(115);t.exports=function(t,e,n){t&&r((function(){t.apply(n||null,e||[])}))}},229:(t,e,n)=>{"use strict";var r=n(584),i=n(514);t.exports=function(t,e){var n=e||{},o={};return void 0===t&&(t={}),t.on=function(e,n){return o[e]?o[e].push(n):o[e]=[n],t},t.once=function(e,n){return n._once=!0,t.on(e,n),t},t.off=function(e,n){var r=arguments.length;if(1===r)delete o[e];else if(0===r)o={};else{var i=o[e];if(!i)return t;i.splice(i.indexOf(n),1)}return t},t.emit=function(){var e=r(arguments);return t.emitterSnapshot(e.shift()).apply(this,e)},t.emitterSnapshot=function(e){var s=(o[e]||[]).slice(0);return function(){var o=r(arguments),a=this||t;if("error"===e&&!1!==n.throws&&!s.length)throw 1===o.length?o[0]:o;return s.forEach((function(r){n.async?i(r,o,a):r.apply(a,o),r._once&&t.off(e,r)})),t}},t}},808:(t,e,n)=>{"use strict";var r=n(638),i=n(874),o=n.g.document,s=function(t,e,n,r){return t.addEventListener(e,n,r)},a=function(t,e,n,r){return t.removeEventListener(e,n,r)},u=[];function c(t,e,n){var r=function(t,e,n){var r,i;for(r=0;r<u.length;r++)if((i=u[r]).element===t&&i.type===e&&i.fn===n)return r}(t,e,n);if(r){var i=u[r].wrapper;return u.splice(r,1),i}}n.g.addEventListener||(s=function(t,e,r){return t.attachEvent("on"+e,function(t,e,r){var i=c(t,e,r)||function(t,e,r){return function(e){var i=e||n.g.event;i.target=i.target||i.srcElement,i.preventDefault=i.preventDefault||function(){i.returnValue=!1},i.stopPropagation=i.stopPropagation||function(){i.cancelBubble=!0},i.which=i.which||i.keyCode,r.call(t,i)}}(t,0,r);return u.push({wrapper:i,element:t,type:e,fn:r}),i}(t,e,r))},a=function(t,e,n){var r=c(t,e,n);if(r)return t.detachEvent("on"+e,r)}),t.exports={add:s,remove:a,fabricate:function(t,e,n){var s=-1===i.indexOf(e)?new r(e,{detail:n}):function(){var t;return o.createEvent?(t=o.createEvent("Event")).initEvent(e,!0,!0):o.createEventObject&&(t=o.createEventObject()),t}();t.dispatchEvent?t.dispatchEvent(s):t.fireEvent("on"+e,s)}}},874:(t,e,n)=>{"use strict";var r=[],i="",o=/^on/;for(i in n.g)o.test(i)&&r.push(i.slice(2));t.exports=r},638:(t,e,n)=>{var r=n.g.CustomEvent;t.exports=function(){try{var t=new r("cat",{detail:{foo:"bar"}});return"cat"===t.type&&"bar"===t.detail.foo}catch(t){}return!1}()?r:"undefined"!=typeof document&&"function"==typeof document.createEvent?function(t,e){var n=document.createEvent("CustomEvent");return e?n.initCustomEvent(t,e.bubbles,e.cancelable,e.detail):n.initCustomEvent(t,!1,!1,void 0),n}:function(t,e){var n=document.createEventObject();return n.type=t,e?(n.bubbles=Boolean(e.bubbles),n.cancelable=Boolean(e.cancelable),n.detail=e.detail):(n.bubbles=!1,n.cancelable=!1,n.detail=void 0),n}},425:t=>{"use strict";var e={};function n(t){var n=e[t];return n?n.lastIndex=0:e[t]=n=new RegExp("(?:^|\\s)"+t+"(?:\\s|$)","g"),n}t.exports={add:function(t,e){var r=t.className;r.length?n(e).test(r)||(t.className+=" "+e):t.className=e},rm:function(t,e){t.className=t.className.replace(n(e)," ").trim()}}},137:(t,e,n)=>{"use strict";var r=n(229),i=n(808),o=n(425),s=document,a=s.documentElement;function u(t,e,r,o){n.g.navigator.pointerEnabled?i[e](t,{mouseup:"pointerup",mousedown:"pointerdown",mousemove:"pointermove"}[r],o):n.g.navigator.msPointerEnabled?i[e](t,{mouseup:"MSPointerUp",mousedown:"MSPointerDown",mousemove:"MSPointerMove"}[r],o):(i[e](t,{mouseup:"touchend",mousedown:"touchstart",mousemove:"touchmove"}[r],o),i[e](t,r,o))}function c(t){if(void 0!==t.touches)return t.touches.length;if(void 0!==t.which&&0!==t.which)return t.which;if(void 0!==t.buttons)return t.buttons;var e=t.button;return void 0!==e?1&e?1:2&e?3:4&e?2:0:void 0}function d(t){var e=t.getBoundingClientRect();return{left:e.left+l("scrollLeft","pageXOffset"),top:e.top+l("scrollTop","pageYOffset")}}function l(t,e){return void 0!==n.g[e]?n.g[e]:a.clientHeight?a[t]:s.body[t]}function f(t,e,n){var r,i=(t=t||{}).className||"";return t.className+=" gu-hide",r=s.elementFromPoint(e,n),t.className=i,r}function v(){return!1}function h(){return!0}function m(t){return t.width||t.right-t.left}function p(t){return t.height||t.bottom-t.top}function g(t){return t.parentNode===s?null:t.parentNode}function y(t){return"INPUT"===t.tagName||"TEXTAREA"===t.tagName||"SELECT"===t.tagName||b(t)}function b(t){return!!t&&"false"!==t.contentEditable&&("true"===t.contentEditable||b(g(t)))}function E(t){return t.nextElementSibling||function(){var e=t;do{e=e.nextSibling}while(e&&1!==e.nodeType);return e}()}function k(t,e){var n=function(t){return t.targetTouches&&t.targetTouches.length?t.targetTouches[0]:t.changedTouches&&t.changedTouches.length?t.changedTouches[0]:t}(e),r={pageX:"clientX",pageY:"clientY"};return t in r&&!(t in n)&&r[t]in n&&(t=r[t]),n[t]}t.exports=function(t,e){var n,l,b,S,w,C,L,T,O,x,B,D=arguments.length;1===D&&!1===Array.isArray(t)&&(e=t,t=[]);var I,N=null,A=e||{};void 0===A.moves&&(A.moves=h),void 0===A.accepts&&(A.accepts=h),void 0===A.invalid&&(A.invalid=z),void 0===A.containers&&(A.containers=t||[]),void 0===A.isContainer&&(A.isContainer=v),void 0===A.copy&&(A.copy=!1),void 0===A.copySortSource&&(A.copySortSource=!1),void 0===A.revertOnSpill&&(A.revertOnSpill=!1),void 0===A.removeOnSpill&&(A.removeOnSpill=!1),void 0===A.direction&&(A.direction="vertical"),void 0===A.ignoreInputTextSelection&&(A.ignoreInputTextSelection=!0),void 0===A.mirrorContainer&&(A.mirrorContainer=s.body);var R=r({containers:A.containers,start:K,end:G,cancel:Z,remove:W,destroy:M,canMove:_,dragging:!1});return!0===A.removeOnSpill&&R.on("over",it).on("out",ot),P(),R;function X(t){return-1!==R.containers.indexOf(t)||A.isContainer(t)}function P(t){var e=t?"remove":"add";u(a,e,"mousedown",V),u(a,e,"mouseup",q)}function Y(t){u(a,t?"remove":"add","mousemove",U)}function j(t){var e=t?"remove":"add";i[e](a,"selectstart",F),i[e](a,"click",F)}function M(){P(!0),q({})}function F(t){I&&t.preventDefault()}function V(t){if(C=t.clientX,L=t.clientY,1===c(t)&&!t.metaKey&&!t.ctrlKey){var e=t.target,n=$(e);n&&(I=n,Y(),"mousedown"===t.type&&(y(e)?e.focus():t.preventDefault()))}}function U(t){if(I)if(0!==c(t)){if(!(void 0!==t.clientX&&Math.abs(t.clientX-C)<=(A.slideFactorX||0)&&void 0!==t.clientY&&Math.abs(t.clientY-L)<=(A.slideFactorY||0))){if(A.ignoreInputTextSelection){var e=k("clientX",t)||0,n=k("clientY",t)||0;if(y(s.elementFromPoint(e,n)))return}var r=I;Y(!0),j(),G(),J(r);var i=d(b);S=k("pageX",t)-i.left,w=k("pageY",t)-i.top,o.add(x||b,"gu-transit"),st(),rt(t)}}else q({})}function $(t){if(!(R.dragging&&n||X(t))){for(var e=t;g(t)&&!1===X(g(t));){if(A.invalid(t,e))return;if(!(t=g(t)))return}var r=g(t);if(r&&!A.invalid(t,e)&&A.moves(t,r,e,E(t)))return{item:t,source:r}}}function _(t){return!!$(t)}function K(t){var e=$(t);e&&J(e)}function J(t){dt(t.item,t.source)&&(x=t.item.cloneNode(!0),R.emit("cloned",x,t.item,"copy")),l=t.source,b=t.item,T=O=E(t.item),R.dragging=!0,R.emit("drag",b,l)}function z(){return!1}function G(){if(R.dragging){var t=x||b;Q(t,g(t))}}function H(){I=!1,Y(!0),j(!0)}function q(t){if(H(),R.dragging){var e=x||b,r=k("clientX",t)||0,i=k("clientY",t)||0,o=nt(f(n,r,i),r,i);o&&(x&&A.copySortSource||!x||o!==l)?Q(e,o):A.removeOnSpill?W():Z()}}function Q(t,e){var n=g(t);x&&A.copySortSource&&e===l&&n.removeChild(b),et(e)?R.emit("cancel",t,l,l):R.emit("drop",t,e,l,O),tt()}function W(){if(R.dragging){var t=x||b,e=g(t);e&&e.removeChild(t),R.emit(x?"cancel":"remove",t,e,l),tt()}}function Z(t){if(R.dragging){var e=arguments.length>0?t:A.revertOnSpill,n=x||b,r=g(n),i=et(r);!1===i&&e&&(x?r&&r.removeChild(x):l.insertBefore(n,T)),i||e?R.emit("cancel",n,l,l):R.emit("drop",n,r,l,O),tt()}}function tt(){var t=x||b;H(),at(),t&&o.rm(t,"gu-transit"),B&&clearTimeout(B),R.dragging=!1,N&&R.emit("out",t,N,l),R.emit("dragend",t),l=b=x=T=O=B=N=null}function et(t,e){var r;return r=void 0!==e?e:n?O:E(x||b),t===l&&r===T}function nt(t,e,n){for(var r=t;r&&!i();)r=g(r);return r;function i(){if(!1===X(r))return!1;var i=ut(r,t),o=ct(r,i,e,n);return!!et(r,o)||A.accepts(b,r,l,o)}}function rt(t){if(n){t.preventDefault();var e=k("clientX",t)||0,r=k("clientY",t)||0,i=e-S,o=r-w;n.style.left=i+"px",n.style.top=o+"px";var s=x||b,a=f(n,e,r),u=nt(a,e,r),c=null!==u&&u!==N;(c||null===u)&&(N&&m("out"),N=u,c&&m("over"));var d=g(s);if(u!==l||!x||A.copySortSource){var v,h=ut(u,a);if(null!==h)v=ct(u,h,e,r);else{if(!0!==A.revertOnSpill||x)return void(x&&d&&d.removeChild(s));v=T,u=l}(null===v&&c||v!==s&&v!==E(s))&&(O=v,u.insertBefore(s,v),R.emit("shadow",s,u,l))}else d&&d.removeChild(s)}function m(t){R.emit(t,s,N,l)}}function it(t){o.rm(t,"gu-hide")}function ot(t){R.dragging&&o.add(t,"gu-hide")}function st(){if(!n){var t=b.getBoundingClientRect();(n=b.cloneNode(!0)).style.width=m(t)+"px",n.style.height=p(t)+"px",o.rm(n,"gu-transit"),o.add(n,"gu-mirror"),A.mirrorContainer.appendChild(n),u(a,"add","mousemove",rt),o.add(A.mirrorContainer,"gu-unselectable"),R.emit("cloned",n,b,"mirror")}}function at(){n&&(o.rm(A.mirrorContainer,"gu-unselectable"),u(a,"remove","mousemove",rt),g(n).removeChild(n),n=null)}function ut(t,e){for(var n=e;n!==t&&g(n)!==t;)n=g(n);return n===a?null:n}function ct(t,e,n,r){var i,o="horizontal"===A.direction,s=e!==t?(i=e.getBoundingClientRect(),a(o?n>i.left+m(i)/2:r>i.top+p(i)/2)):function(){var e,i,s,a=t.children.length;for(e=0;e<a;e++){if(s=(i=t.children[e]).getBoundingClientRect(),o&&s.left+s.width/2>n)return i;if(!o&&s.top+s.height/2>r)return i}return null}();return s;function a(t){return t?E(e):e}}function dt(t,e){return"boolean"==typeof A.copy?A.copy:A.copy(t,e)}}},115:t=>{var e;e="function"==typeof setImmediate?function(t){setImmediate(t)}:function(t){setTimeout(t,0)},t.exports=e}},e={};function n(r){var i=e[r];if(void 0!==i)return i.exports;var o=e[r]={exports:{}};return t[r](o,o.exports,n),o.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{"use strict";var t,e=new Uint8Array(16);function r(){if(!t&&!(t="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return t(e)}const i=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i,o=function(t){return"string"==typeof t&&i.test(t)};for(var s=[],a=0;a<256;++a)s.push((a+256).toString(16).substr(1));const u=function(t,e,n){var i=(t=t||{}).random||(t.rng||r)();if(i[6]=15&i[6]|64,i[8]=63&i[8]|128,e){n=n||0;for(var a=0;a<16;++a)e[n+a]=i[a];return e}return function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=(s[t[e+0]]+s[t[e+1]]+s[t[e+2]]+s[t[e+3]]+"-"+s[t[e+4]]+s[t[e+5]]+"-"+s[t[e+6]]+s[t[e+7]]+"-"+s[t[e+8]]+s[t[e+9]]+"-"+s[t[e+10]]+s[t[e+11]]+s[t[e+12]]+s[t[e+13]]+s[t[e+14]]+s[t[e+15]]).toLowerCase();if(!o(n))throw TypeError("Stringified UUID is invalid");return n}(i)};class c{constructor(){this.listeners={}}add(t,e,n,r=u()){this.listeners[r]={event:t,element:e,handler:n},e.addEventListener(t,n)}remove(t){const e=this.listeners[t];e&&(e.element.removeEventListener(e.event,e.handler),delete this.listeners[t])}}const d={todo:"TODO",doing:"DOING",done:"DONE"};class l{constructor(t){this.id=t.id||u(),this.title=t.title,this.status=t.status||d.todo}static validate(t){return!!(t&&o(t.id)&&t.title&&Object.values(d).includes(t.status))}update(t){t.title&&(this.title=t.title),t.status&&(this.status=t.status)}}const f="TASKS";class v{constructor(){this.tasks=[],this.storage=localStorage,this.tasks=this.getStoredTasks()}add(t){this.tasks.push(t),this.updateStrage()}remove(t){const e=t.map((t=>t.id));this.tasks=this.tasks.filter((({id:t})=>!e.includes(t))),this.updateStrage()}find(t){return this.tasks.find((e=>e.id===t))}filterByStatus(t){return this.tasks.filter((({status:e})=>e===t))}update(t){this.tasks=this.tasks.map((e=>e.id===t.id?t:e)),this.updateStrage()}moveAboveTarget(t,e){const n=this.tasks.indexOf(t),r=this.tasks.indexOf(e);this.changeOrder(t,n,n<r?r-1:r)}moveToLast(t){const e=this.tasks.indexOf(t);this.changeOrder(t,e,this.tasks.length)}changeOrder(t,e,n){this.tasks.splice(e,1),this.tasks.splice(n,0,t),this.updateStrage()}updateStrage(){this.storage.setItem(f,JSON.stringify(this.tasks))}getStoredTasks(){const t=this.storage.getItem(f);if(!t)return[];try{const e=JSON.parse(t);return function(t){if(!Array.isArray(t)||!t.every((t=>l.validate(t))))throw new Error(`引数${t}は TaskObject[]型と一致しません。`)}(e),e.map((t=>new l(t)))}catch(t){return this.storage.removeItem(f),[]}}}var h=n(137),m=n.n(h);class p{constructor(t,e,n){this.todoList=t,this.doingList=e,this.doneList=n}renderAll(t){return[...this.renderList(t.filterByStatus(d.todo),this.todoList),...this.renderList(t.filterByStatus(d.doing),this.doingList),...this.renderList(t.filterByStatus(d.done),this.doneList)]}append(t){const{taskEl:e,deleteButtonEl:n}=this.render(t);return this.todoList.append(e),{deleteButtonEl:n}}remove(t){t.forEach((t=>{const e=document.getElementById(t.id);if(!e)return;let n;switch(t.status){case d.todo:n=this.todoList;break;case d.doing:n=this.doingList;break;case d.done:n=this.doneList}n.removeChild(e)}))}subscribeDragAndDrop(t){m()([this.todoList,this.doingList,this.doneList]).on("drop",((e,n,r,i)=>{let o=d.todo;"doingList"===n.id&&(o=d.doing),"doneList"===n.id&&(o=d.done),t(e,i,o)}))}getId(t){return t.id}render(t){const e=document.createElement("div"),n=document.createElement("span"),r=document.createElement("button");return e.id=t.id,e.classList.add("task-item"),n.textContent=t.title,r.textContent="削除",e.append(n,r),{taskEl:e,deleteButtonEl:r}}renderList(t,e){if(0===t.length)return[];const n=[];return t.forEach((t=>{const{taskEl:r,deleteButtonEl:i}=this.render(t);e.append(r),n.push({task:t,deleteButtonEl:i})})),n}}class g{constructor(){this.eventListner=new c,this.taskCollection=new v,this.taskRenderer=new p(document.getElementById("todoList"),document.getElementById("doingList"),document.getElementById("doneList"))}start(){const t=this.taskRenderer.renderAll(this.taskCollection),e=document.getElementById("createForm"),n=document.getElementById("deleteAllDoneTask");t.forEach((({task:t,deleteButtonEl:e})=>{this.eventListner.add("click",e,(()=>this.handleClickDeleteTask(t)),t.id)})),this.eventListner.add("submit",e,this.handleSubmit.bind(this)),this.eventListner.add("click",n,this.handleClickDeleteAllDoneTasks.bind(this)),this.taskRenderer.subscribeDragAndDrop(this.handleDrogAndDrop.bind(this))}handleSubmit(t){t.preventDefault();const e=document.getElementById("title");if(!e.value)return;const n=new l({title:e.value});this.taskCollection.add(n);const{deleteButtonEl:r}=this.taskRenderer.append(n);this.eventListner.add("click",r,(()=>this.handleClickDeleteTask(n))),e.value=""}handleClickDeleteTask(t){window.confirm(`${t.title}を削除してよろしいですか？`)&&(this.eventListner.remove(t.id),this.taskCollection.remove([t]),this.taskRenderer.remove([t]))}handleClickDeleteAllDoneTasks(){if(!window.confirm("DONE のタスクを一括削除してよろしいですか？"))return;const t=this.taskCollection.filterByStatus(d.done);this.taskCollection.remove(t),this.taskRenderer.remove(t)}handleDrogAndDrop(t,e,n){const r=this.taskRenderer.getId(t);if(!r)return;const i=this.taskCollection.find(r);if(i)if(i.update({status:n}),this.taskCollection.update(i),e){const t=this.taskRenderer.getId(e);if(!t)return;const n=this.taskCollection.find(t);if(!n)return;this.taskCollection.moveAboveTarget(i,n)}else this.taskCollection.moveToLast(i)}}window.addEventListener("load",(()=>{(new g).start()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,